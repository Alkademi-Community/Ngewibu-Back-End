// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "prisma-generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// lookup migrations
model Role {
  id        Int       @id @default(autoincrement())
  name      String
  users     User[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Gender {
  id            Int           @id @default(autoincrement())
  name          String
  user_profiles UserProfile[]
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  deletedAt     DateTime?
}

model EventType {
  id        Int       @id @default(autoincrement())
  name      String
  events    Event[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model EventStatus {
  id        Int       @id @default(autoincrement())
  name      String
  events    Event[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  events    Event[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

// model CommentType {
//   id        Int       @id @default(autoincrement())
//   name      String
//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @updatedAt
//   deletedAt DateTime?
//   Comment   Comment[]
// }

// model LikeType {
//   id        Int       @id @default(autoincrement())
//   name      String
//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @updatedAt
//   deletedAt DateTime?
//   Like      Like[]
// }

// user related migrations
model User {
  id                 Int                @id @default(autoincrement())
  username           String             @unique
  password           String
  email              String             @unique
  token              String?
  isActivated        Int                @default(0) @db.SmallInt()
  isVerified         Int                @default(0) @db.SmallInt()
  role               Role               @relation(fields: [roleId], references: [id])
  roleId             Int
  resetPasswordToken String?
  userProfile        UserProfile[]
  eventParticipants  EventParticipant[]
  comments           Comment[]
  likes              Like[]
  createdAt          DateTime?          @default(now())
  updatedAt          DateTime?          @updatedAt
  deletedAt          DateTime?
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  gender      Gender    @relation(fields: [genderId], references: [id])
  genderId    Int
  name        String
  address     String?
  bio         String?
  dateOfBirth DateTime? @db.Date()
  imageUrl    String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
}

// event related migrations
model Event {
  id                Int                @id @default(autoincrement())
  eventType         EventType          @relation(fields: [eventTypeId], references: [id])
  eventTypeId       Int
  eventStatus       EventStatus        @relation(fields: [eventStatusId], references: [id])
  eventStatusId     Int
  city              City               @relation(fields: [cityId], references: [id])
  cityId            Int
  title             String
  slug              String             @unique
  description       String?
  address           String
  mapUrl            String?
  meetUrl           String?
  startDate         DateTime
  endDate           DateTime
  eventParticipants EventParticipant[]
  comments          Comment[]
  likes             Like[]
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  deletedAt         DateTime?
}

model EventParticipant {
  id        Int       @id @default(autoincrement())
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Comment {
  id        Int       @id @default(autoincrement())
  event     Event     @relation(fields: [eventId], references: [id], map: "comment_event_fk")
  eventId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  Children  Comment[] @relation("Comment_Children")
  comment   Comment?  @relation("Comment_Children", fields: [commentId], references: [id], map: "comment_comment_fk")
  commentId Int?
  // type      CommentType @relation(fields: [typeId], references: [id])
  // typeId    Int
  content   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  Like      Like[]
}

model Like {
  id        Int       @id @default(autoincrement())
  event     Event     @relation(fields: [eventId], references: [id], map: "like_event_fk")
  eventId   Int
  comment   Comment?  @relation(fields: [commentId], references: [id], map: "like_comment_fk")
  commentId Int?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  // type      LikeType  @relation(fields: [typeId], references: [id])
  // typeId    Int
  like      Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}
